# Задача 1:
# Найти сумму и произведение цифр трехзначного числа, которое вводит пользователь.

# Решение 1.
# Тема. Линейные алгоритмы
# Если число разделить нацело на десять, в остатке будет последняя цифра этого числа.
# Например, если 349 разделить нацело на 10, то получится частное 34 и остаток 9.
# Если потом 34 разделить также, то получится частное 3 и остаток 4
# далее при делении 3 на 10 получим частное 0 и остаток 3.

# Алгоритм нахождения суммы цифр трехзначного числа abc
# (где a - сотни, b - десятки и c - единицы) можно описать так:
n = input("Введите трехзначное число: ")
n = int(n)

# 1 Найти остаток от деления abc на 10, записать его в переменную d1. Это будет цифра c.
d1 = n % 10
# 2 Избавиться от цифры c в числе abc, разделив его нацело на 10.
n = n // 10
# 3 Найти остаток от деления ab на 10, записать его в переменную d2. Это будет цифра b
d2 = n % 10
# Избавиться от цифры b в числе ab, разделив его нацело на 10.
n = n // 10
# Найти остаток от деления a на 10, записать его в переменную d3. Это будет цифра a.
d3 = n % 10
# Сложить цифры a, b и c.

print("Сумма цифр числа: ", d1+d2+d3)

# Решение 2.
# Циклический алгоритм
n = input("Введите трехзначное число: ")
sum = 0
for i in n:
    sum += int(i)
print(sum)


print("\n Задача 2 \n")
# Битовые операции над числами

# Задача 2
# Выполнить логические побитовые операции "И", "ИЛИ" и др. над числами 5 и 6.
# Выполнить над числом 5 побитовый сдвиг вправо и влево на два знака. Объяснить полученный результат.

# Конспект
# Обычно в языках программирования предусмотрены так называемые логические побитовые операции.
# Они выполняются не над самими числами, а над их двоичным представлением.
# Например, число 5 в двоичной системе счисления выражается как 101, а число 6 - как 110.
# Выполняя логическую побитовую операцию "И" получим число 4, т.к. в младшим разряде числа 5 стоит 1, а числа 6 - 0.
# Выражение "1 и 0" возвращает 0. Продолжая поразрядно выполнять логическое "И" в среднем разряде получим 0,
# а в старшем 1. Можно записать так:
# 101
# 110
# 100
# Двоичное число 100 - это десятичное число 4.

# Выполним операцию побитового логического "ИЛИ":
# 101
# 110
# 111 - это число 7.

# "Исключающее ИЛИ":
# 101
# 110
# 011 - это число 3.

# При сдвиге биты просто сдвигаются на указанное количество ячеек в освободившиеся ячейки дописываются нули
# или единицы (это зависит от ряда причин):
# 110 << 2 = 11000 (число 24),
# 110 >> 2 = 001 (число 1).

# Решение
a = 5
print("%d = %s" % (a, bin(a)))
b = 6
print("%d = %s" % (b, bin(b)))

print("%d & %d = %d (%s)" % (a, b, a & b, bin(a & b)))
print("%d | %d = %d (%s)" % (a, b, a | b, bin(a | b)))
print("%d ^ %d = %d (%s)" % (a, b, a ^ b, bin(a ^ b)))
print("%d << 2 = %d (%s)" % (b, b << 2, bin(b << 2)))
print("%d >> 2 = %d (%s)" % (b, b >> 2, bin(b >> 2)))

# Задача 3
#  По введенным пользователем координатам двух точек вывести уравнение прямой вида y=kx+b, проходящей через эти точки.
# Вывести уравнение прямой, проходящей через заданные точки.
# Уравнение прямой на координатной плоскости имеет следующий вид: y = kx + b.
# Если известны координаты двух точек, лежащих на этой прямой,
# то можно, решая систему уравнений, определить значения коэффициентов k и b.
# Таким образом выводится уравнение конкретной прямой, например, у = 3x - 1.

# Решаем систему уравнений:

# y1 = kx1 + b

# y2 = kx2 + b

# b = y2 - kx2

# y1 = kx1 + y2 - kx2

# k = (y1 - y2) / (x1 - x2)


# Решение

print("Координаты точки A(x1;y1):")

x1 = float(input("\tx1 = "))

y1 = float(input("\ty1 = "))

print("Координаты точки B(x2;y2):")

x2 = float(input("\tx2 = "))

y2 = float(input("\ty2 = "))

print("Уравнение прямой, проходящей через эти точки:")

k = (y1 - y2) / (x1 - x2)

b = y2 - k*x2

print(" y = %.2f*x + %.2f" % (k, b))
# или
print(" y =", k, "* x +", b)
